// Copyright Â© 2016 Zenly <hello@zen.ly>.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package zenly.protein;

import "protobuf/gogoproto/gogo.proto";

// -----------------------------------------------------------------------------

option go_package = "protein";

option java_multiple_files = true;
option java_package = "co.znly.protein";

option (gogoproto.marshaler_all) = false;
option (gogoproto.unmarshaler_all) = false;
option (gogoproto.sizer_all) = false;
option (gogoproto.protosizer_all) = false;
option (gogoproto.unsafe_marshaler_all) = false;
option (gogoproto.unsafe_unmarshaler_all) = false;
option (gogoproto.stable_marshaler_all) = false;
option (gogoproto.typedecl_all) = true;
option (gogoproto.gostring_all) = true;
option (gogoproto.stringer_all) = false;
option (gogoproto.onlyone_all) = false;

// -----------------------------------------------------------------------------

// ProtobufPayload is a protobuf payload annotated with the unique versioning
// identifier of its schema.
//
// This allows a `ProtobufPayload` to be decoded at runtime using Protein's
// `Transcoder`.
//
// See `ScanSchemas`'s documentation for more information.
message ProtobufPayload {
	// SchemaUID is the unique, deterministic & versioned identifier of the
	// `payload`'s schema.
	string schema_uid = 1 [(gogoproto.customname) = "SchemaUID"];
	// Payload is the actual, marshaled protobuf payload.
	bytes payload = 2 [(gogoproto.customname) = "Payload"];
}
