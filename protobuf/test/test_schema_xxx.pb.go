// Code generated by protoc-gen-gogo.
// source: test_schema_xxx.proto
// DO NOT EDIT!

package test

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TestSchemaXXX_WeatherType int32

const (
	TestSchemaXXX_SUN   TestSchemaXXX_WeatherType = 0
	TestSchemaXXX_CLOUD TestSchemaXXX_WeatherType = 1
	TestSchemaXXX_RAIN  TestSchemaXXX_WeatherType = 2
	TestSchemaXXX_SNOW  TestSchemaXXX_WeatherType = 3
)

var TestSchemaXXX_WeatherType_name = map[int32]string{
	0: "SUN",
	1: "CLOUD",
	2: "RAIN",
	3: "SNOW",
}
var TestSchemaXXX_WeatherType_value = map[string]int32{
	"SUN":   0,
	"CLOUD": 1,
	"RAIN":  2,
	"SNOW":  3,
}

func (x TestSchemaXXX_WeatherType) String() string {
	return proto.EnumName(TestSchemaXXX_WeatherType_name, int32(x))
}
func (TestSchemaXXX_WeatherType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTestSchemaXxx, []int{1, 0}
}

type OtherTestSchemaXXX struct {
	Ts *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=ts" json:"ts,omitempty"`
}

func (m *OtherTestSchemaXXX) Reset()                    { *m = OtherTestSchemaXXX{} }
func (m *OtherTestSchemaXXX) String() string            { return proto.CompactTextString(m) }
func (*OtherTestSchemaXXX) ProtoMessage()               {}
func (*OtherTestSchemaXXX) Descriptor() ([]byte, []int) { return fileDescriptorTestSchemaXxx, []int{0} }

func (m *OtherTestSchemaXXX) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

type TestSchemaXXX struct {
	SchemaUID string                                `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FQNames   []string                              `protobuf:"bytes,2,rep,name=fq_name,json=fqName" json:"fq_name,omitempty"`
	Deps      map[string]*TestSchemaXXX_NestedEntry `protobuf:"bytes,4,rep,name=deps" json:"deps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Ids       map[int32]string                      `protobuf:"bytes,12,rep,name=ids" json:"ids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ts        google_protobuf.Timestamp             `protobuf:"bytes,7,opt,name=ts" json:"ts"`
	Ots       *OtherTestSchemaXXX                   `protobuf:"bytes,9,opt,name=ots" json:"ots,omitempty"`
	Nss       []TestSchemaXXX_NestedEntry           `protobuf:"bytes,8,rep,name=nss" json:"nss"`
	Weathers  []TestSchemaXXX_WeatherType           `protobuf:"varint,13,rep,packed,name=weathers,enum=test.TestSchemaXXX_WeatherType" json:"weathers,omitempty"`
}

func (m *TestSchemaXXX) Reset()                    { *m = TestSchemaXXX{} }
func (m *TestSchemaXXX) String() string            { return proto.CompactTextString(m) }
func (*TestSchemaXXX) ProtoMessage()               {}
func (*TestSchemaXXX) Descriptor() ([]byte, []int) { return fileDescriptorTestSchemaXxx, []int{1} }

func (m *TestSchemaXXX) GetSchemaUID() string {
	if m != nil {
		return m.SchemaUID
	}
	return ""
}

func (m *TestSchemaXXX) GetFQNames() []string {
	if m != nil {
		return m.FQNames
	}
	return nil
}

func (m *TestSchemaXXX) GetDeps() map[string]*TestSchemaXXX_NestedEntry {
	if m != nil {
		return m.Deps
	}
	return nil
}

func (m *TestSchemaXXX) GetIds() map[int32]string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *TestSchemaXXX) GetTs() google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return google_protobuf.Timestamp{}
}

func (m *TestSchemaXXX) GetOts() *OtherTestSchemaXXX {
	if m != nil {
		return m.Ots
	}
	return nil
}

func (m *TestSchemaXXX) GetNss() []TestSchemaXXX_NestedEntry {
	if m != nil {
		return m.Nss
	}
	return nil
}

func (m *TestSchemaXXX) GetWeathers() []TestSchemaXXX_WeatherType {
	if m != nil {
		return m.Weathers
	}
	return nil
}

type TestSchemaXXX_NestedEntry struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TestSchemaXXX_NestedEntry) Reset()         { *m = TestSchemaXXX_NestedEntry{} }
func (m *TestSchemaXXX_NestedEntry) String() string { return proto.CompactTextString(m) }
func (*TestSchemaXXX_NestedEntry) ProtoMessage()    {}
func (*TestSchemaXXX_NestedEntry) Descriptor() ([]byte, []int) {
	return fileDescriptorTestSchemaXxx, []int{1, 0}
}

func (m *TestSchemaXXX_NestedEntry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TestSchemaXXX_NestedEntry) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*OtherTestSchemaXXX)(nil), "test.OtherTestSchemaXXX")
	proto.RegisterType((*TestSchemaXXX)(nil), "test.TestSchemaXXX")
	proto.RegisterType((*TestSchemaXXX_NestedEntry)(nil), "test.TestSchemaXXX.NestedEntry")
	proto.RegisterEnum("test.TestSchemaXXX_WeatherType", TestSchemaXXX_WeatherType_name, TestSchemaXXX_WeatherType_value)
}
func (this *OtherTestSchemaXXX) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&test.OtherTestSchemaXXX{")
	if this.Ts != nil {
		s = append(s, "Ts: "+fmt.Sprintf("%#v", this.Ts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TestSchemaXXX) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&test.TestSchemaXXX{")
	s = append(s, "SchemaUID: "+fmt.Sprintf("%#v", this.SchemaUID)+",\n")
	s = append(s, "FQNames: "+fmt.Sprintf("%#v", this.FQNames)+",\n")
	keysForDeps := make([]string, 0, len(this.Deps))
	for k, _ := range this.Deps {
		keysForDeps = append(keysForDeps, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDeps)
	mapStringForDeps := "map[string]*TestSchemaXXX_NestedEntry{"
	for _, k := range keysForDeps {
		mapStringForDeps += fmt.Sprintf("%#v: %#v,", k, this.Deps[k])
	}
	mapStringForDeps += "}"
	if this.Deps != nil {
		s = append(s, "Deps: "+mapStringForDeps+",\n")
	}
	keysForIds := make([]int32, 0, len(this.Ids))
	for k, _ := range this.Ids {
		keysForIds = append(keysForIds, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForIds)
	mapStringForIds := "map[int32]string{"
	for _, k := range keysForIds {
		mapStringForIds += fmt.Sprintf("%#v: %#v,", k, this.Ids[k])
	}
	mapStringForIds += "}"
	if this.Ids != nil {
		s = append(s, "Ids: "+mapStringForIds+",\n")
	}
	s = append(s, "Ts: "+strings.Replace(this.Ts.GoString(), `&`, ``, 1)+",\n")
	if this.Ots != nil {
		s = append(s, "Ots: "+fmt.Sprintf("%#v", this.Ots)+",\n")
	}
	if this.Nss != nil {
		s = append(s, "Nss: "+fmt.Sprintf("%#v", this.Nss)+",\n")
	}
	s = append(s, "Weathers: "+fmt.Sprintf("%#v", this.Weathers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TestSchemaXXX_NestedEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&test.TestSchemaXXX_NestedEntry{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTestSchemaXxx(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

func init() { proto.RegisterFile("test_schema_xxx.proto", fileDescriptorTestSchemaXxx) }

var fileDescriptorTestSchemaXxx = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x8f, 0xd2, 0x40,
	0x14, 0xc7, 0xa7, 0x0c, 0x2c, 0xf4, 0x21, 0xa6, 0x99, 0x68, 0xd2, 0x34, 0xee, 0x94, 0x10, 0x0f,
	0x64, 0x0f, 0xdd, 0x75, 0x0d, 0x6a, 0xf4, 0xa2, 0x88, 0x26, 0x24, 0xa6, 0xc4, 0x02, 0x59, 0x6e,
	0xa4, 0x6b, 0x07, 0x96, 0xb8, 0xa5, 0x5d, 0x66, 0x50, 0xb8, 0xed, 0xd1, 0x8b, 0x89, 0x1f, 0xc1,
	0x8f, 0xe0, 0xc7, 0xd8, 0xa3, 0x47, 0x4f, 0x44, 0xcb, 0x17, 0xf0, 0xe8, 0xd1, 0xcc, 0x14, 0x08,
	0x1b, 0x89, 0x7b, 0x7b, 0xf3, 0xde, 0xfb, 0xbd, 0xff, 0xfb, 0xbf, 0x81, 0xbb, 0x82, 0x71, 0xd1,
	0xe7, 0xef, 0xce, 0x58, 0xe8, 0xf7, 0x67, 0xb3, 0x99, 0x13, 0x4f, 0x22, 0x11, 0x91, 0xac, 0x4c,
	0x5b, 0xf6, 0x30, 0x8a, 0x86, 0xe7, 0xec, 0x50, 0xe5, 0x4e, 0xa7, 0x83, 0x43, 0x31, 0x0a, 0x19,
	0x17, 0x7e, 0x18, 0xa7, 0x6d, 0xd6, 0xfe, 0xa6, 0x32, 0x8c, 0x86, 0x91, 0x7a, 0xa8, 0x28, 0x2d,
	0x57, 0x9e, 0x03, 0x69, 0x89, 0x33, 0x36, 0xe9, 0x30, 0x2e, 0xda, 0x4a, 0xa2, 0xd7, 0xeb, 0x91,
	0x03, 0xc8, 0x08, 0x6e, 0x6a, 0x65, 0xad, 0x5a, 0x3c, 0xb6, 0x9c, 0x54, 0xc2, 0x59, 0x0f, 0x72,
	0x3a, 0x6b, 0x09, 0x2f, 0x23, 0x78, 0xe5, 0x73, 0x0e, 0x4a, 0xd7, 0x69, 0x1b, 0xf0, 0x74, 0x14,
	0x28, 0x5c, 0xaf, 0x97, 0x92, 0x85, 0xad, 0xa7, 0xb5, 0x6e, 0xb3, 0xe1, 0xc9, 0x0a, 0xb9, 0x0f,
	0xf9, 0xc1, 0x45, 0x7f, 0xec, 0x87, 0xcc, 0xcc, 0x94, 0x71, 0x55, 0xaf, 0x17, 0x93, 0x85, 0x9d,
	0x7f, 0xfd, 0xd6, 0xf5, 0x43, 0xc6, 0xbd, 0xbd, 0xc1, 0x85, 0x0c, 0xc8, 0x03, 0xc8, 0x06, 0x2c,
	0xe6, 0x66, 0xb6, 0x8c, 0xab, 0xc5, 0xe3, 0x7d, 0x47, 0xfa, 0x75, 0xae, 0x29, 0x39, 0x0d, 0x16,
	0xf3, 0x57, 0x63, 0x31, 0x99, 0x7b, 0xaa, 0x95, 0x38, 0x80, 0x47, 0x01, 0x37, 0x6f, 0x29, 0xe2,
	0xde, 0x2e, 0xa2, 0x19, 0xac, 0x00, 0xd9, 0x48, 0x8e, 0x94, 0xcf, 0xfc, 0x4d, 0x3e, 0xeb, 0xd9,
	0xab, 0x85, 0x8d, 0xa4, 0x5b, 0x72, 0x00, 0x38, 0x12, 0xdc, 0xd4, 0x15, 0x62, 0xa6, 0x0a, 0xff,
	0x1e, 0xd0, 0x93, 0x4d, 0xe4, 0x31, 0xe0, 0x31, 0xe7, 0x66, 0x41, 0x6d, 0x63, 0xef, 0xda, 0xc6,
	0x65, 0x5c, 0xb0, 0x40, 0x2d, 0xb4, 0xd2, 0x90, 0x04, 0x79, 0x06, 0x85, 0x8f, 0xcc, 0x97, 0x53,
	0xb9, 0x59, 0x2a, 0xe3, 0xea, 0xed, 0xdd, 0xf4, 0x49, 0xda, 0xd3, 0x99, 0xc7, 0xcc, 0xdb, 0x00,
	0x56, 0x0d, 0x8a, 0x5b, 0x63, 0x89, 0x01, 0xf8, 0x3d, 0x9b, 0xa7, 0x9f, 0xe1, 0xc9, 0x90, 0xdc,
	0x81, 0xdc, 0x07, 0xff, 0x7c, 0x2a, 0x6f, 0x2f, 0x73, 0xe9, 0xc3, 0xea, 0x81, 0xbe, 0xb9, 0xe6,
	0x0e, 0xa8, 0xb6, 0x0d, 0xdd, 0xec, 0x66, 0x35, 0xf5, 0x69, 0xe6, 0x89, 0x66, 0x3d, 0x82, 0xc2,
	0xfa, 0xea, 0xdb, 0x83, 0x73, 0xff, 0xd9, 0x46, 0x72, 0x95, 0x1a, 0x14, 0xb7, 0x1c, 0x92, 0x3c,
	0xe0, 0x76, 0xd7, 0x35, 0x10, 0xd1, 0x21, 0xf7, 0xf2, 0x4d, 0xab, 0xdb, 0x30, 0x34, 0x52, 0x80,
	0xac, 0xf7, 0xa2, 0xe9, 0x1a, 0x19, 0x19, 0xb5, 0xdd, 0xd6, 0x89, 0x81, 0xeb, 0x47, 0xbf, 0x7f,
	0x51, 0xed, 0x32, 0xa1, 0xe8, 0x53, 0x42, 0xd1, 0x55, 0x42, 0xd1, 0xf7, 0x84, 0xa2, 0x1f, 0x09,
	0x45, 0x3f, 0x13, 0x8a, 0xfe, 0x24, 0x14, 0x5d, 0x2e, 0x29, 0xfa, 0xb2, 0xa4, 0xe8, 0xeb, 0x92,
	0xa2, 0x6f, 0x4b, 0xaa, 0x9d, 0xee, 0xa9, 0x1f, 0x7f, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x46,
	0x09, 0xc8, 0xcc, 0x69, 0x03, 0x00, 0x00,
}
